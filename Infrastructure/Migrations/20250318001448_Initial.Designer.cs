// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250318001448_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("Domain.Entities.Agent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("Domain.Entities.AgentVerbalisateur", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AgentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AgentsExterieurs")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DossierId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPrincipal")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("DossierId");

                    b.HasIndex("ServiceId");

                    b.ToTable("AgentVerbalisateurs");
                });

            modelBuilder.Entity("Domain.Entities.Dossier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateDeClotureDuPv")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateDesConstatations")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateEnregistrement")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPenal")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NatureDossier")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ReseauDeCompetences")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TypeDossier")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UniteProprietaire")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("Dossiers");
                });

            modelBuilder.Entity("Domain.Entities.Etablissement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DossierId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RaisonSociale")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Siret")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DossierId");

                    b.ToTable("Etablissements");
                });

            modelBuilder.Entity("Domain.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Domain.Entities.Transmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateEnvoi")
                        .HasColumnType("TEXT");

                    b.Property<string>("DessaisissementAutreParquet")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DossierId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Parquets")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DossierId")
                        .IsUnique();

                    b.ToTable("Transmissions");
                });

            modelBuilder.Entity("Domain.Entities.AgentVerbalisateur", b =>
                {
                    b.HasOne("Domain.Entities.Agent", "Agent")
                        .WithMany("AgentVerbalisateurs")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Dossier", "Dossier")
                        .WithMany("AgentVerbalisateurs")
                        .HasForeignKey("DossierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Service", "Service")
                        .WithMany("AgentVerbalisateurs")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Dossier");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Domain.Entities.Dossier", b =>
                {
                    b.HasOne("Domain.Entities.Service", "Service")
                        .WithMany("Dossiers")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Domain.Entities.Etablissement", b =>
                {
                    b.HasOne("Domain.Entities.Dossier", "Dossier")
                        .WithMany("Etablissements")
                        .HasForeignKey("DossierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dossier");
                });

            modelBuilder.Entity("Domain.Entities.Transmission", b =>
                {
                    b.HasOne("Domain.Entities.Dossier", "Dossier")
                        .WithOne("Transmission")
                        .HasForeignKey("Domain.Entities.Transmission", "DossierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dossier");
                });

            modelBuilder.Entity("Domain.Entities.Agent", b =>
                {
                    b.Navigation("AgentVerbalisateurs");
                });

            modelBuilder.Entity("Domain.Entities.Dossier", b =>
                {
                    b.Navigation("AgentVerbalisateurs");

                    b.Navigation("Etablissements");

                    b.Navigation("Transmission")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Service", b =>
                {
                    b.Navigation("AgentVerbalisateurs");

                    b.Navigation("Dossiers");
                });
#pragma warning restore 612, 618
        }
    }
}
